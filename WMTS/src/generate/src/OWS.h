// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `OWS.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __G__MyProject_IceServer_WMTS_WMTS_src_generate_src_OWS_h__
#define __G__MyProject_IceServer_WMTS_WMTS_src_generate_src_OWS_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace OWSMODULE
{

class DataOperation;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::OWSMODULE::DataOperation>&);
::IceProxy::Ice::Object* upCast(::IceProxy::OWSMODULE::DataOperation*);

}

}

namespace OWSMODULE
{

class DataOperation;
bool operator==(const DataOperation&, const DataOperation&);
bool operator<(const DataOperation&, const DataOperation&);
::Ice::Object* upCast(::OWSMODULE::DataOperation*);
typedef ::IceInternal::Handle< ::OWSMODULE::DataOperation> DataOperationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::OWSMODULE::DataOperation> DataOperationPrx;
void __patch(DataOperationPtr&, const ::Ice::ObjectPtr&);

}

namespace OWSMODULE
{

typedef ::std::vector< ::Ice::Byte> byteSeq;

typedef ::std::vector< ::std::string> stringSeq;

struct BBOX
{
    ::Ice::Double xmin;
    ::Ice::Double ymin;
    ::Ice::Double xmax;
    ::Ice::Double ymax;
};

enum OWSState
{
    OWSWAIT,
    OWSSTART,
    OWSFINISH,
    OWSERROR
};

struct OWSTask
{
    ::std::string taskID;
    ::OWSMODULE::OWSState state;
    ::Ice::Int length;

    bool operator==(const OWSTask& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(taskID != __rhs.taskID)
        {
            return false;
        }
        if(state != __rhs.state)
        {
            return false;
        }
        if(length != __rhs.length)
        {
            return false;
        }
        return true;
    }

    bool operator<(const OWSTask& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(taskID < __rhs.taskID)
        {
            return true;
        }
        else if(__rhs.taskID < taskID)
        {
            return false;
        }
        if(state < __rhs.state)
        {
            return true;
        }
        else if(__rhs.state < state)
        {
            return false;
        }
        if(length < __rhs.length)
        {
            return true;
        }
        else if(__rhs.length < length)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const OWSTask& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const OWSTask& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const OWSTask& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const OWSTask& __rhs) const
    {
        return !operator<(__rhs);
    }
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::OWSMODULE::BBOX>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 32;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::OWSMODULE::BBOX, S>
{
    static void write(S* __os, const ::OWSMODULE::BBOX& v)
    {
        __os->write(v.xmin);
        __os->write(v.ymin);
        __os->write(v.xmax);
        __os->write(v.ymax);
    }
};

template<class S>
struct StreamReader< ::OWSMODULE::BBOX, S>
{
    static void read(S* __is, ::OWSMODULE::BBOX& v)
    {
        __is->read(v.xmin);
        __is->read(v.ymin);
        __is->read(v.xmax);
        __is->read(v.ymax);
    }
};

template<>
struct StreamableTraits< ::OWSMODULE::OWSState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::OWSMODULE::OWSTask>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::OWSMODULE::OWSTask, S>
{
    static void write(S* __os, const ::OWSMODULE::OWSTask& v)
    {
        __os->write(v.taskID);
        __os->write(v.state);
        __os->write(v.length);
    }
};

template<class S>
struct StreamReader< ::OWSMODULE::OWSTask, S>
{
    static void read(S* __is, ::OWSMODULE::OWSTask& v)
    {
        __is->read(v.taskID);
        __is->read(v.state);
        __is->read(v.length);
    }
};

}

namespace OWSMODULE
{

class Callback_DataOperation_CheckState_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DataOperation_CheckState_Base> Callback_DataOperation_CheckStatePtr;

class Callback_DataOperation_ReadData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DataOperation_ReadData_Base> Callback_DataOperation_ReadDataPtr;

class Callback_DataOperation_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DataOperation_shutdown_Base> Callback_DataOperation_shutdownPtr;

}

namespace IceProxy
{

namespace OWSMODULE
{

class DataOperation : virtual public ::IceProxy::Ice::Object
{
public:

    void CheckState(const ::std::string& taskID, ::OWSMODULE::OWSTask& task)
    {
        CheckState(taskID, task, 0);
    }
    void CheckState(const ::std::string& taskID, ::OWSMODULE::OWSTask& task, const ::Ice::Context& __ctx)
    {
        CheckState(taskID, task, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_CheckState(const ::std::string& taskID, const ::IceInternal::Function<void (const ::OWSMODULE::OWSTask&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_CheckState(taskID, 0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_CheckState(const ::std::string& taskID, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_CheckState(taskID, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_CheckState(const ::std::string& taskID, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::OWSMODULE::OWSTask&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_CheckState(taskID, &ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_CheckState(const ::std::string& taskID, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_CheckState(taskID, &ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_CheckState(const ::std::string& taskID, const ::Ice::Context* ctx, const ::IceInternal::Function<void (const ::OWSMODULE::OWSTask&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::OWSMODULE::OWSTask&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::OWSMODULE::DataOperationPrx __proxy = ::OWSMODULE::DataOperationPrx::uncheckedCast(__result->getProxy());
                ::OWSMODULE::OWSTask task;
                try
                {
                    __proxy->end_CheckState(task, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(task);
                }
            }
        
        private:
            
            ::std::function<void (const ::OWSMODULE::OWSTask&)> _response;
        };
        return begin_CheckState(taskID, ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_CheckState(const ::std::string& taskID)
    {
        return begin_CheckState(taskID, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_CheckState(const ::std::string& taskID, const ::Ice::Context& __ctx)
    {
        return begin_CheckState(taskID, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_CheckState(const ::std::string& taskID, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CheckState(taskID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CheckState(const ::std::string& taskID, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CheckState(taskID, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CheckState(const ::std::string& taskID, const ::OWSMODULE::Callback_DataOperation_CheckStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CheckState(taskID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CheckState(const ::std::string& taskID, const ::Ice::Context& __ctx, const ::OWSMODULE::Callback_DataOperation_CheckStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CheckState(taskID, &__ctx, __del, __cookie);
    }

    void end_CheckState(::OWSMODULE::OWSTask& task, const ::Ice::AsyncResultPtr&);
    
private:

    void CheckState(const ::std::string&, ::OWSMODULE::OWSTask&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_CheckState(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int ReadData(const ::std::string& taskID, ::OWSMODULE::byteSeq& DataBlock)
    {
        return ReadData(taskID, DataBlock, 0);
    }
    ::Ice::Int ReadData(const ::std::string& taskID, ::OWSMODULE::byteSeq& DataBlock, const ::Ice::Context& __ctx)
    {
        return ReadData(taskID, DataBlock, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ReadData(const ::std::string& taskID, const ::IceInternal::Function<void (::Ice::Int, const ::OWSMODULE::byteSeq&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ReadData(taskID, 0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_ReadData(const ::std::string& taskID, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ReadData(taskID, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ReadData(const ::std::string& taskID, const ::Ice::Context& ctx, const ::IceInternal::Function<void (::Ice::Int, const ::OWSMODULE::byteSeq&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ReadData(taskID, &ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_ReadData(const ::std::string& taskID, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ReadData(taskID, &ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_ReadData(const ::std::string& taskID, const ::Ice::Context* ctx, const ::IceInternal::Function<void (::Ice::Int, const ::OWSMODULE::byteSeq&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::OWSMODULE::byteSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::OWSMODULE::DataOperationPrx __proxy = ::OWSMODULE::DataOperationPrx::uncheckedCast(__result->getProxy());
                ::OWSMODULE::byteSeq DataBlock;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_ReadData(DataBlock, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, DataBlock);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::OWSMODULE::byteSeq&)> _response;
        };
        return begin_ReadData(taskID, ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_ReadData(const ::std::string& taskID)
    {
        return begin_ReadData(taskID, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ReadData(const ::std::string& taskID, const ::Ice::Context& __ctx)
    {
        return begin_ReadData(taskID, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ReadData(const ::std::string& taskID, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadData(taskID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReadData(const ::std::string& taskID, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadData(taskID, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReadData(const ::std::string& taskID, const ::OWSMODULE::Callback_DataOperation_ReadDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadData(taskID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReadData(const ::std::string& taskID, const ::Ice::Context& __ctx, const ::OWSMODULE::Callback_DataOperation_ReadDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadData(taskID, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_ReadData(::OWSMODULE::byteSeq& DataBlock, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int ReadData(const ::std::string&, ::OWSMODULE::byteSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ReadData(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&ctx, ::Ice::newCallback(completed, sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::OWSMODULE::Callback_DataOperation_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::OWSMODULE::Callback_DataOperation_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<DataOperation> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<DataOperation*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<DataOperation> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<DataOperation*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DataOperation> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<DataOperation*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<DataOperation> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<DataOperation*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DataOperation> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<DataOperation*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<DataOperation> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<DataOperation*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<DataOperation> ice_secure(bool __secure) const
    {
        return dynamic_cast<DataOperation*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<DataOperation> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<DataOperation*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<DataOperation> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<DataOperation*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<DataOperation> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<DataOperation*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<DataOperation> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<DataOperation*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<DataOperation> ice_twoway() const
    {
        return dynamic_cast<DataOperation*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<DataOperation> ice_oneway() const
    {
        return dynamic_cast<DataOperation*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<DataOperation> ice_batchOneway() const
    {
        return dynamic_cast<DataOperation*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<DataOperation> ice_datagram() const
    {
        return dynamic_cast<DataOperation*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<DataOperation> ice_batchDatagram() const
    {
        return dynamic_cast<DataOperation*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<DataOperation> ice_compress(bool __compress) const
    {
        return dynamic_cast<DataOperation*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<DataOperation> ice_timeout(int __timeout) const
    {
        return dynamic_cast<DataOperation*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DataOperation> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<DataOperation*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DataOperation> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<DataOperation*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace OWSMODULE
{

class DataOperation : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void CheckState(const ::std::string&, ::OWSMODULE::OWSTask&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int ReadData(const ::std::string&, ::OWSMODULE::byteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace OWSMODULE
{

class DataOperation : virtual public ::IceDelegate::OWSMODULE::DataOperation,
                      virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void CheckState(const ::std::string&, ::OWSMODULE::OWSTask&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int ReadData(const ::std::string&, ::OWSMODULE::byteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace OWSMODULE
{

class DataOperation : virtual public ::IceDelegate::OWSMODULE::DataOperation,
                      virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void CheckState(const ::std::string&, ::OWSMODULE::OWSTask&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int ReadData(const ::std::string&, ::OWSMODULE::byteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace OWSMODULE
{

class DataOperation : virtual public ::Ice::Object
{
public:

    typedef DataOperationPrx ProxyType;
    typedef DataOperationPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void CheckState(const ::std::string&, ::OWSMODULE::OWSTask&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___CheckState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int ReadData(const ::std::string&, ::OWSMODULE::byteSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ReadData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const DataOperation& l, const DataOperation& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DataOperation& l, const DataOperation& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace OWSMODULE
{

template<class T>
class CallbackNC_DataOperation_CheckState : public Callback_DataOperation_CheckState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::OWSMODULE::OWSTask&);

    CallbackNC_DataOperation_CheckState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::OWSMODULE::DataOperationPrx __proxy = ::OWSMODULE::DataOperationPrx::uncheckedCast(__result->getProxy());
        ::OWSMODULE::OWSTask task;
        try
        {
            __proxy->end_CheckState(task, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(task);
        }
    }

    Response response;
};

template<class T> Callback_DataOperation_CheckStatePtr
newCallback_DataOperation_CheckState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::OWSMODULE::OWSTask&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataOperation_CheckState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataOperation_CheckStatePtr
newCallback_DataOperation_CheckState(T* instance, void (T::*cb)(const ::OWSMODULE::OWSTask&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataOperation_CheckState<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DataOperation_CheckState : public Callback_DataOperation_CheckState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::OWSMODULE::OWSTask&, const CT&);

    Callback_DataOperation_CheckState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::OWSMODULE::DataOperationPrx __proxy = ::OWSMODULE::DataOperationPrx::uncheckedCast(__result->getProxy());
        ::OWSMODULE::OWSTask task;
        try
        {
            __proxy->end_CheckState(task, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(task, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DataOperation_CheckStatePtr
newCallback_DataOperation_CheckState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::OWSMODULE::OWSTask&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataOperation_CheckState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataOperation_CheckStatePtr
newCallback_DataOperation_CheckState(T* instance, void (T::*cb)(const ::OWSMODULE::OWSTask&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataOperation_CheckState<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DataOperation_ReadData : public Callback_DataOperation_ReadData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::OWSMODULE::byteSeq&);

    CallbackNC_DataOperation_ReadData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::OWSMODULE::DataOperationPrx __proxy = ::OWSMODULE::DataOperationPrx::uncheckedCast(__result->getProxy());
        ::OWSMODULE::byteSeq DataBlock;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ReadData(DataBlock, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, DataBlock);
        }
    }

    Response response;
};

template<class T> Callback_DataOperation_ReadDataPtr
newCallback_DataOperation_ReadData(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::OWSMODULE::byteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataOperation_ReadData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataOperation_ReadDataPtr
newCallback_DataOperation_ReadData(T* instance, void (T::*cb)(::Ice::Int, const ::OWSMODULE::byteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataOperation_ReadData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DataOperation_ReadData : public Callback_DataOperation_ReadData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::OWSMODULE::byteSeq&, const CT&);

    Callback_DataOperation_ReadData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::OWSMODULE::DataOperationPrx __proxy = ::OWSMODULE::DataOperationPrx::uncheckedCast(__result->getProxy());
        ::OWSMODULE::byteSeq DataBlock;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ReadData(DataBlock, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, DataBlock, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DataOperation_ReadDataPtr
newCallback_DataOperation_ReadData(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::OWSMODULE::byteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataOperation_ReadData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataOperation_ReadDataPtr
newCallback_DataOperation_ReadData(T* instance, void (T::*cb)(::Ice::Int, const ::OWSMODULE::byteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataOperation_ReadData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DataOperation_shutdown : public Callback_DataOperation_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DataOperation_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DataOperation_shutdownPtr
newCallback_DataOperation_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataOperation_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataOperation_shutdownPtr
newCallback_DataOperation_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataOperation_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DataOperation_shutdownPtr
newCallback_DataOperation_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataOperation_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataOperation_shutdownPtr
newCallback_DataOperation_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataOperation_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DataOperation_shutdown : public Callback_DataOperation_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DataOperation_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DataOperation_shutdownPtr
newCallback_DataOperation_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataOperation_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataOperation_shutdownPtr
newCallback_DataOperation_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataOperation_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DataOperation_shutdownPtr
newCallback_DataOperation_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataOperation_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataOperation_shutdownPtr
newCallback_DataOperation_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataOperation_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
